"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const localized_error_1 = require("./localized-error");
class Generator {
    static capitalize(str, upperCase = false) {
        if (!upperCase) {
            return str[0].toUpperCase() + str.substring(1).toLowerCase();
        }
        return str.toUpperCase();
    }
    static getName(upperCase, k, name = "") {
        if (!upperCase) {
            return name + Generator.capitalize(k);
        }
        else {
            if (name !== "") {
                return name + "_" + Generator.capitalize(k, upperCase);
            }
            else {
                return name + Generator.capitalize(k, upperCase);
            }
        }
    }
    static generate(options, upperCase = false) {
        const errors = {};
        this._generate(upperCase, errors, options);
        return errors;
    }
    static _generate(upperCase, savor, data, name) {
        if (name && data && data.messages) {
            const options = {
                code: data.code,
                messages: data.messages,
                name,
                prefix: data.prefix,
            };
            const le = new localized_error_1.LocalizedError(options);
            savor[name] = le.get();
        }
        for (const k of Object.keys(data)) {
            if (k === "messages" || k === "code") {
                continue;
            }
            let subData = data[k];
            if (data[k].alias) {
                subData = data[data[k].alias];
            }
            this._generate(upperCase, savor, subData, Generator.getName(upperCase, k, name));
        }
    }
}
exports.Generator = Generator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVEQUFrRTtBQUVsRSxNQUFhLFNBQVM7SUFDYixNQUFNLENBQUMsVUFBVSxDQUFDLEdBQVcsRUFBRSxZQUFxQixLQUFLO1FBQzlELElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQzlEO1FBQ0QsT0FBTyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVNLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBa0IsRUFBRSxDQUFTLEVBQUUsT0FBZSxFQUFFO1FBQ3BFLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxPQUFPLElBQUksR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3ZDO2FBQU07WUFDTCxJQUFJLElBQUksS0FBSyxFQUFFLEVBQUU7Z0JBQ2YsT0FBTyxJQUFJLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO2FBQ3hEO2lCQUFNO2dCQUNMLE9BQU8sSUFBSSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO2FBQ2xEO1NBQ0Y7SUFDSCxDQUFDO0lBRU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFzQixFQUFFLFlBQXFCLEtBQUs7UUFDdkUsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMzQyxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRU8sTUFBTSxDQUFDLFNBQVMsQ0FDdEIsU0FBa0IsRUFDbEIsS0FBVSxFQUNWLElBQVMsRUFDVCxJQUFhO1FBRWIsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakMsTUFBTSxPQUFPLEdBQWtCO2dCQUM3QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO2dCQUN2QixJQUFJO2dCQUNKLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTthQUNwQixDQUFDO1lBQ0YsTUFBTSxFQUFFLEdBQUcsSUFBSSxnQ0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDeEI7UUFDRCxLQUFLLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakMsSUFBSSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsS0FBSyxNQUFNLEVBQUU7Z0JBQ3BDLFNBQVM7YUFDVjtZQUVELElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUV0QixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUU7Z0JBQ2pCLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQy9CO1lBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FDWixTQUFTLEVBQ1QsS0FBSyxFQUNMLE9BQU8sRUFDUCxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQ3RDLENBQUM7U0FDSDtJQUNILENBQUM7Q0FDRjtBQTVERCw4QkE0REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRXJyb3JPcHRpb25zLCBMb2NhbGl6ZWRFcnJvciB9IGZyb20gXCIuL2xvY2FsaXplZC1lcnJvclwiO1xuXG5leHBvcnQgY2xhc3MgR2VuZXJhdG9yIHtcbiAgcHVibGljIHN0YXRpYyBjYXBpdGFsaXplKHN0cjogc3RyaW5nLCB1cHBlckNhc2U6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIGlmICghdXBwZXJDYXNlKSB7XG4gICAgICByZXR1cm4gc3RyWzBdLnRvVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyaW5nKDEpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzdHIudG9VcHBlckNhc2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0TmFtZSh1cHBlckNhc2U6IGJvb2xlYW4sIGs6IHN0cmluZywgbmFtZTogc3RyaW5nID0gXCJcIikge1xuICAgIGlmICghdXBwZXJDYXNlKSB7XG4gICAgICByZXR1cm4gbmFtZSArIEdlbmVyYXRvci5jYXBpdGFsaXplKGspO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobmFtZSAhPT0gXCJcIikge1xuICAgICAgICByZXR1cm4gbmFtZSArIFwiX1wiICsgR2VuZXJhdG9yLmNhcGl0YWxpemUoaywgdXBwZXJDYXNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuYW1lICsgR2VuZXJhdG9yLmNhcGl0YWxpemUoaywgdXBwZXJDYXNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdlbmVyYXRlKG9wdGlvbnM6IElFcnJvck9wdGlvbnMsIHVwcGVyQ2FzZTogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgY29uc3QgZXJyb3JzID0ge307XG4gICAgdGhpcy5fZ2VuZXJhdGUodXBwZXJDYXNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIHJldHVybiBlcnJvcnM7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBfZ2VuZXJhdGUoXG4gICAgdXBwZXJDYXNlOiBib29sZWFuLFxuICAgIHNhdm9yOiBhbnksXG4gICAgZGF0YTogYW55LFxuICAgIG5hbWU/OiBzdHJpbmdcbiAgKSB7XG4gICAgaWYgKG5hbWUgJiYgZGF0YSAmJiBkYXRhLm1lc3NhZ2VzKSB7XG4gICAgICBjb25zdCBvcHRpb25zOiBJRXJyb3JPcHRpb25zID0ge1xuICAgICAgICBjb2RlOiBkYXRhLmNvZGUsXG4gICAgICAgIG1lc3NhZ2VzOiBkYXRhLm1lc3NhZ2VzLFxuICAgICAgICBuYW1lLFxuICAgICAgICBwcmVmaXg6IGRhdGEucHJlZml4LFxuICAgICAgfTtcbiAgICAgIGNvbnN0IGxlID0gbmV3IExvY2FsaXplZEVycm9yKG9wdGlvbnMpO1xuICAgICAgc2F2b3JbbmFtZV0gPSBsZS5nZXQoKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKGRhdGEpKSB7XG4gICAgICBpZiAoayA9PT0gXCJtZXNzYWdlc1wiIHx8IGsgPT09IFwiY29kZVwiKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBsZXQgc3ViRGF0YSA9IGRhdGFba107XG5cbiAgICAgIGlmIChkYXRhW2tdLmFsaWFzKSB7XG4gICAgICAgIHN1YkRhdGEgPSBkYXRhW2RhdGFba10uYWxpYXNdO1xuICAgICAgfVxuICAgICAgdGhpcy5fZ2VuZXJhdGUoXG4gICAgICAgIHVwcGVyQ2FzZSxcbiAgICAgICAgc2F2b3IsXG4gICAgICAgIHN1YkRhdGEsXG4gICAgICAgIEdlbmVyYXRvci5nZXROYW1lKHVwcGVyQ2FzZSwgaywgbmFtZSlcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iXX0=