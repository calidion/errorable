"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const localized_error_1 = require("./localized-error");
class Generator {
    static load(jsonFilenanme) {
        return JSON.parse(String(fs.readFileSync(jsonFilenanme)));
    }
    static save(jsonFilenanme, json) {
        return fs.writeFileSync(jsonFilenanme, JSON.stringify(json));
    }
    static capitalize(str, upperCase = false) {
        if (!upperCase) {
            return str[0].toUpperCase() + str.substring(1).toLowerCase();
        }
        return str.toUpperCase();
    }
    static getName(upperCase, k, name = "") {
        if (!upperCase) {
            return name + Generator.capitalize(k);
        }
        else {
            if (name !== "") {
                return name + "_" + Generator.capitalize(k, upperCase);
            }
            else {
                return name + Generator.capitalize(k, upperCase);
            }
        }
    }
    static generate(options, upperCase = false) {
        const errors = {};
        this._generate(upperCase, errors, options);
        return errors;
    }
    static _generate(upperCase, savor, data, name) {
        if (name && data && data.messages) {
            const options = {
                code: data.code,
                messages: data.messages,
                name,
                prefix: data.prefix,
            };
            const le = new localized_error_1.LocalizedError(options);
            savor[name] = le.get();
        }
        for (const k of Object.keys(data)) {
            if (k === "messages" || k === "code") {
                continue;
            }
            let subData = data[k];
            if (data[k].alias) {
                subData = data[data[k].alias];
            }
            this._generate(upperCase, savor, subData, Generator.getName(upperCase, k, name));
        }
    }
}
exports.Generator = Generator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlCQUF5QjtBQUN6Qix1REFBa0U7QUFFbEUsTUFBYSxTQUFTO0lBQ2IsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFxQjtRQUN0QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFDTSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQXFCLEVBQUUsSUFBWTtRQUNwRCxPQUFPLEVBQUUsQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBQ00sTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFXLEVBQUUsWUFBcUIsS0FBSztRQUM5RCxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUM5RDtRQUNELE9BQU8sR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQWtCLEVBQUUsQ0FBUyxFQUFFLE9BQWUsRUFBRTtRQUNwRSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsT0FBTyxJQUFJLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN2QzthQUFNO1lBQ0wsSUFBSSxJQUFJLEtBQUssRUFBRSxFQUFFO2dCQUNmLE9BQU8sSUFBSSxHQUFHLEdBQUcsR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQzthQUN4RDtpQkFBTTtnQkFDTCxPQUFPLElBQUksR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQzthQUNsRDtTQUNGO0lBQ0gsQ0FBQztJQUVNLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBc0IsRUFBRSxZQUFxQixLQUFLO1FBQ3ZFLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDM0MsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVPLE1BQU0sQ0FBQyxTQUFTLENBQ3RCLFNBQWtCLEVBQ2xCLEtBQVUsRUFDVixJQUFTLEVBQ1QsSUFBYTtRQUViLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pDLE1BQU0sT0FBTyxHQUFrQjtnQkFDN0IsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtnQkFDdkIsSUFBSTtnQkFDSixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07YUFDcEIsQ0FBQztZQUNGLE1BQU0sRUFBRSxHQUFHLElBQUksZ0NBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN2QyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQ3hCO1FBQ0QsS0FBSyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEtBQUssTUFBTSxFQUFFO2dCQUNwQyxTQUFTO2FBQ1Y7WUFFRCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFdEIsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFO2dCQUNqQixPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUMvQjtZQUNELElBQUksQ0FBQyxTQUFTLENBQ1osU0FBUyxFQUNULEtBQUssRUFDTCxPQUFPLEVBQ1AsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUN0QyxDQUFDO1NBQ0g7SUFDSCxDQUFDO0NBQ0Y7QUFsRUQsOEJBa0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgeyBJRXJyb3JPcHRpb25zLCBMb2NhbGl6ZWRFcnJvciB9IGZyb20gXCIuL2xvY2FsaXplZC1lcnJvclwiO1xuXG5leHBvcnQgY2xhc3MgR2VuZXJhdG9yIHtcbiAgcHVibGljIHN0YXRpYyBsb2FkKGpzb25GaWxlbmFubWU6IHN0cmluZykge1xuICAgIHJldHVybiBKU09OLnBhcnNlKFN0cmluZyhmcy5yZWFkRmlsZVN5bmMoanNvbkZpbGVuYW5tZSkpKTtcbiAgfVxuICBwdWJsaWMgc3RhdGljIHNhdmUoanNvbkZpbGVuYW5tZTogc3RyaW5nLCBqc29uOiBvYmplY3QpIHtcbiAgICByZXR1cm4gZnMud3JpdGVGaWxlU3luYyhqc29uRmlsZW5hbm1lLCBKU09OLnN0cmluZ2lmeShqc29uKSk7XG4gIH1cbiAgcHVibGljIHN0YXRpYyBjYXBpdGFsaXplKHN0cjogc3RyaW5nLCB1cHBlckNhc2U6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIGlmICghdXBwZXJDYXNlKSB7XG4gICAgICByZXR1cm4gc3RyWzBdLnRvVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyaW5nKDEpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzdHIudG9VcHBlckNhc2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0TmFtZSh1cHBlckNhc2U6IGJvb2xlYW4sIGs6IHN0cmluZywgbmFtZTogc3RyaW5nID0gXCJcIikge1xuICAgIGlmICghdXBwZXJDYXNlKSB7XG4gICAgICByZXR1cm4gbmFtZSArIEdlbmVyYXRvci5jYXBpdGFsaXplKGspO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobmFtZSAhPT0gXCJcIikge1xuICAgICAgICByZXR1cm4gbmFtZSArIFwiX1wiICsgR2VuZXJhdG9yLmNhcGl0YWxpemUoaywgdXBwZXJDYXNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuYW1lICsgR2VuZXJhdG9yLmNhcGl0YWxpemUoaywgdXBwZXJDYXNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdlbmVyYXRlKG9wdGlvbnM6IElFcnJvck9wdGlvbnMsIHVwcGVyQ2FzZTogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgY29uc3QgZXJyb3JzID0ge307XG4gICAgdGhpcy5fZ2VuZXJhdGUodXBwZXJDYXNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIHJldHVybiBlcnJvcnM7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBfZ2VuZXJhdGUoXG4gICAgdXBwZXJDYXNlOiBib29sZWFuLFxuICAgIHNhdm9yOiBhbnksXG4gICAgZGF0YTogYW55LFxuICAgIG5hbWU/OiBzdHJpbmdcbiAgKSB7XG4gICAgaWYgKG5hbWUgJiYgZGF0YSAmJiBkYXRhLm1lc3NhZ2VzKSB7XG4gICAgICBjb25zdCBvcHRpb25zOiBJRXJyb3JPcHRpb25zID0ge1xuICAgICAgICBjb2RlOiBkYXRhLmNvZGUsXG4gICAgICAgIG1lc3NhZ2VzOiBkYXRhLm1lc3NhZ2VzLFxuICAgICAgICBuYW1lLFxuICAgICAgICBwcmVmaXg6IGRhdGEucHJlZml4LFxuICAgICAgfTtcbiAgICAgIGNvbnN0IGxlID0gbmV3IExvY2FsaXplZEVycm9yKG9wdGlvbnMpO1xuICAgICAgc2F2b3JbbmFtZV0gPSBsZS5nZXQoKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKGRhdGEpKSB7XG4gICAgICBpZiAoayA9PT0gXCJtZXNzYWdlc1wiIHx8IGsgPT09IFwiY29kZVwiKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBsZXQgc3ViRGF0YSA9IGRhdGFba107XG5cbiAgICAgIGlmIChkYXRhW2tdLmFsaWFzKSB7XG4gICAgICAgIHN1YkRhdGEgPSBkYXRhW2RhdGFba10uYWxpYXNdO1xuICAgICAgfVxuICAgICAgdGhpcy5fZ2VuZXJhdGUoXG4gICAgICAgIHVwcGVyQ2FzZSxcbiAgICAgICAgc2F2b3IsXG4gICAgICAgIHN1YkRhdGEsXG4gICAgICAgIEdlbmVyYXRvci5nZXROYW1lKHVwcGVyQ2FzZSwgaywgbmFtZSlcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iXX0=